import java.util.Comparator;

import components.map.Map;
import components.map.Map1L;
import components.queue.Queue;
import components.queue.Queue1L;
import components.set.Set;
import components.set.Set1L;
import components.simplereader.SimpleReader;
import components.simplereader.SimpleReader1L;
import components.simplewriter.SimpleWriter;
import components.simplewriter.SimpleWriter1L;

/**
 * Simple HelloWorld program (clear of Checkstyle and FindBugs warnings).
 *
 * @author Tingyang Xie
 */
public final class Glossary3 {

    /**
     * Default constructor--private to prevent instantiation.
     */
    private Glossary3() {
        // no code needed here
    }

    private static class IntegerLT implements Comparator<String> {
        @Override
        public int compare(String o1, String o2) {
            return o1.compareTo(o2);
        }
    }

    /**
     * Outputs the "opening" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * <html> <head> <title>Sample Glossary</title> </head> <body>
     * <h2>Sample Glossary</h2>
     * <hr />
     * <h3>Index</h3>
     * <ul>
     *
     *
     * @param out
     *            the output stream
     * @updates out.content
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "opening" tags]
     */
    private static void outputIndexHeader(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";
        out.println("<html>");
        out.println("<head>");
        out.println("<title>Glossary</title>");
        out.println("</head>");
        out.println("<body>");
        out.println("   <h2>Glossary</h2>");
        out.println("   <hr/>");
        out.println("   <h3>Index</h3>");
        out.println("<ul>");

    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </ul>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     *
     */
    private static void outputIndexFooter(SimpleWriter out) {
        assert out != null : "Violation of: out is not null";
        assert out.isOpen() : "Violation of: out.is_open";

        out.println("  </ul>");
        out.println("</body>");
        out.println("</html>");
    }

    /**
     * Outputs the "closing" tags in the generated HTML file. These are the
     * expected elements generated by this method:
     *
     * </ul>
     * </body> </html>
     *
     * @param out
     *            the output stream
     * @updates out.contents
     * @requires out.is_open
     * @ensures out.content = #out.content * [the HTML "closing" tags]
     *
     */
    private static void outputWordFooter(SimpleWriter out) {
        out.println("<hr/>");
        out.println("<p>Return to <a href=\"index.html\">index</a>.</p>");
        out.println("</body>");
        out.println("</html>");
    }

    /*
     * put one word and it's definition into a map
     *
     *
     * @param dictionary
     *
     * @param words
     *
     * @param in
     *
     * @updates dictionary
     *
     * @requires in.is_open
     *
     * @ensures word and it's definition in a map
     *
     */
    private static void getOneWord(Map<String, String> dictionary,
            Queue<String> words, SimpleReader in) {
        assert in != null : "Violation of: input is not null";
        assert in.isOpen() : "Violation of: input.is_open";
        String line = "a";
        String word = "";
        String definition = "";
        Queue<String> pair = new Queue1L<>();
        while (!line.equals("")) {
            line = in.nextLine();
            pair.enqueue(line);

        }

        word = pair.dequeue();
        words.enqueue(word);
        for (int i = 0; i < pair.length(); i++) {
            String subString = pair.dequeue();
            definition += subString;
        }
        dictionary.add(word, definition);
    }

    /**
     * Generates the set of characters in the given {@code String} into the
     * given {@code Set}.
     *
     * @param str
     *            the given {@code String}
     * @param strSet
     *            the {@code Set} to be replaced
     * @replaces strSet
     * @ensures strSet = entries(str)
     */
    private static void generateElements(String str, Set<Character> strSet) {
        assert str != null : "Violation of: str is not null";
        assert strSet != null : "Violation of: strSet is not null";
        for (int i = 0; i < str.length(); i++) {
            char character = str.charAt(i);
            boolean isSubset = strSet.contains(character);
            if (isSubset == false) {
                strSet.add(character);
            }

        }

    }

    /**
     * Returns the first "word" (maximal length string of characters not in
     * {@code separators}) or "separator string" (maximal length string of
     * characters in {@code separators}) in the given {@code text} starting at
     * the given {@code position}.
     *
     * @param text
     *            the {@code String} from which to get the word or separator
     *            string
     * @param position
     *            the starting index
     * @param separators
     *            the {@code Set} of separator characters
     * @return the first word or separator string found in {@code text} starting
     *         at index {@code position}
     * @requires 0 <= position < |text|
     * @ensures <pre>
     * nextWordOrSeparator =
     *   text[position, position + |nextWordOrSeparator|)  and
     * if entries(text[position, position + 1)) intersection separators = {}
     * then
     *   entries(nextWordOrSeparator) intersection separators = {}  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      intersection separators /= {})
     * else
     *   entries(nextWordOrSeparator) is subset of separators  and
     *   (position + |nextWordOrSeparator| = |text|  or
     *    entries(text[position, position + |nextWordOrSeparator| + 1))
     *      is not subset of separators)
     * </pre>
     */
    private static String nextWordOrSeparator(String text, int position,
            Set<Character> separators) {
        assert text != null : "Violation of: text is not null";
        assert separators != null : "Violation of: separators is not null";
        assert 0 <= position : "Violation of: 0 <= position";
        assert position < text.length() : "Violation of: position < |text|";

        int length = text.length();
        String nextWordOrSeparator = "";

        char character = text.charAt(position);
        boolean isSubset = separators.contains(character);

        if (isSubset == true) {
            while (isSubset == true && position < length) {
                character = text.charAt(position);
                nextWordOrSeparator += character;
                int len = position + 1;
                if (len < length) {
                    char test = text.charAt(position + 1);
                    isSubset = separators.contains(test);
                }
                position++;
            }
        } else {
            while (isSubset == false && position < length) {
                character = text.charAt(position);
                nextWordOrSeparator += character;
                int len = position + 1;
                if (len < length) {
                    char test = text.charAt(position + 1);
                    isSubset = separators.contains(test);
                }

                position++;

            }
        }
        return nextWordOrSeparator;
    }

    /**
     * input one dictionary and find the words
     *
     * @param input
     *            the input stream
     * @updates input
     * @requires <pre>
     * input.is_open and
     *
     * </pre>
     * @ensures <pre>
     * input.is_open and
     * #input.content = [one word from the list
     * print out correct html format
     * </pre>
     */
    public static void generateWordHTML(Set<String> checkWords,
            Queue<String> words, Map<String, String> dictionary,
            SimpleWriter outIndex, Set<Character> separatorSet) {
        assert outIndex != null : "Violation of: out is not null";
        assert outIndex.isOpen() : "Violation of: out.is_open";
        String strBegin = "<blockquote>";
        String strUrlBegin = "<a href=\"";
        String strUrlEnd1 = ".html\">";
        String strUrlEnd2 = "</a>";
        String strEnd = "</blockquote>";
        int lengthOfWords = words.length();

        for (int i = 0; i < lengthOfWords; i++) {
            String word = words.dequeue();
            String definition = dictionary.value(word);
            int position = 0;
            while (position < definition.length()) {
                String token = nextWordOrSeparator(definition, position,
                        separatorSet);
                int wordLength = token.length();
                position += wordLength;
                boolean isSubset = checkWords.contains(token);
                if (isSubset == true) {
                    int index = definition.indexOf(token);
                    String str1 = definition.substring(0, index);
                    String str2 = token;
                    String str3 = definition.substring(index + wordLength);
                    definition = str1 + strUrlBegin + str2 + strUrlEnd1 + str2
                            + strUrlEnd2 + str3;
                }

            }

            outIndex.println(
                    "<li><a href=\"" + word + ".html\">" + word + "</a></li>");
            SimpleWriter out = new SimpleWriter1L("data/" + word + ".html");
            out.println("<html>");
            out.println("<head>");
            out.println("<title>" + word + "</title>");
            out.println("</head>");
            out.println("<body>");
            out.println("<h2><b><i><font color=\"red\">" + word
                    + "</font></i></b></h2>");
            out.println(strBegin + definition + strEnd);
            outputWordFooter(out);

        }

    }

    /**
     * Main method.
     *
     * @param args
     *            the command line arguments; unused here
     */
    public static void main(String[] args) {
        final String separatorStr = " \t, ";
        Set<Character> separatorSet = new Set1L<>();
        generateElements(separatorStr, separatorSet);

        SimpleWriter out = new SimpleWriter1L();
        out.println("input your file:");
        SimpleReader in = new SimpleReader1L();
        String file = in.nextLine();
        SimpleReader inWords = new SimpleReader1L(file);
        SimpleReader inText = new SimpleReader1L(file);
        out.println("where do you want those files saved at?");
        String folder = in.nextLine();
        SimpleWriter outIndex = new SimpleWriter1L(folder + "/index.html");

        Map<String, String> dictionary = new Map1L<>();
        Queue<String> words = new Queue1L<>();

        while (!inWords.atEOS()) {
            getOneWord(dictionary, words, inWords);
        }
        int length = words.length();
        String[] listForChecking = new String[length];
        Set<String> checkWords = new Set1L<>();
        for (int i = 0; i < length; i++) {
            String word = words.dequeue();
            listForChecking[i] = word;
            checkWords.add(word);
        }
        for (int i = 0; i < length; i++) {
            words.enqueue(listForChecking[i]);
        }

        // sort words in alph
        Comparator<String> ci = new IntegerLT();
        words.sort(ci);
        //out.print(words);
        outputIndexHeader(outIndex);
        generateWordHTML(checkWords, words, dictionary, outIndex, separatorSet);
        outputIndexFooter(outIndex);

        inText.close();
        inWords.close();
        in.close();
        out.close();
        outIndex.close();
    }

}
